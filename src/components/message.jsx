import React, { useContext, useEffect, useRef } from 'react'
import '../css/message.css'
import { AuthContext } from '../context/authContext'
import { ChatContext } from '../context/chatContext'
import { Timestamp } from 'firebase/firestore'

const Message = ({message}) => {

  const {currentUser} = useContext(AuthContext);
  const {data} = useContext(ChatContext);

  const ref = useRef();

  function downloadImage(imageUrl) {
    const timestamp = new Date().getTime(); // Get current timestamp
    const imageName = `chatbyte_${timestamp}.jpg`; // Construct the filename
    // console.log(imageUrl,imageName);
    const anchor = document.createElement('a');
    anchor.href = imageUrl;
    anchor.download = imageName;
    anchor.style.display = 'none'; // Hide the anchor element
    document.body.appendChild(anchor);
    anchor.click();
  }

  useEffect(() => {
    ref.current?.scrollIntoView({ behavior: "smooth" });
    ref.current.style.animation = 'bounce 0.5s';
    setTimeout(() => {
      ref.current.style.animation = '';
    }, 500);
    
  }, [message]);

  // console.log(message)
  // console.log(data)

  const dateFormatter = new Intl.DateTimeFormat("en-US", {
    year: "2-digit",
    month: "2-digit",
    day: "2-digit",
  });

  const timeFormatter = new Intl.DateTimeFormat("en-US", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: true, // Use 12-hour time format
  });

  const getFormattedTime = (timestamp) => {
      const now = Timestamp.now().seconds;
      const messageTime = new Date(timestamp?.seconds * 1000)
      const timeDifference = Math.floor((now - timestamp.seconds));
      const date = dateFormatter?.format(messageTime);
      const time = timeFormatter?.format(messageTime);
      const hours = Math.floor(timeDifference / 3600);

      // console.log("now", messageTime);
      // console.log("time", time);
      // console.log("date", date);
      // console.log("hours", hours);
      // console.log("time diff", timeDifference)
      
      
  
    if (timeDifference < 10) {
      return 'just now';
    } else if (hours < 24) {
      return `${time}`
    } else{
      return `${date} ${time}`;
    }
  };


// Assuming message.date contains the local timestamp generated by timestamp.now()
const formattedTime = getFormattedTime(message?.date);


  return (
    <div ref={ref} className={currentUser?.uid === message?.senderId ? "message owner" : 'message'}>
      <div className="messageInfo">
        <img src={message?.senderId === currentUser.uid ? currentUser?.photoURL : data?.user?.photoURL} alt="" />
        <span>{formattedTime}</span>
      </div>
      <div className="messageData">
        {message.img &&<img onClick={()=> downloadImage(message?.img)} src={message?.img} alt="" />}
        {message.text != "" && <p>{message?.text}</p>}
      </div>
    </div>
  )
}

export default Message